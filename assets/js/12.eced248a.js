(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{239:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"javascript简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript简介","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript简介")]),t._v(" "),s("p",[s("em",[t._v("诞生记:")]),t._v("  在拨号上网的时代, 校验表单只能将数据发送到服务器端才可以验证, 但是等待时间过长, 很是蛋疼.")]),t._v(" "),s("ol",[s("li",[t._v("他是一种脚本语言,   直接可以执行源码.")]),t._v(" "),s("li",[t._v("由Brendan Eich 设计,借鉴了了多种语言.")]),t._v(" "),s("li",[t._v("由 "),s("code",[t._v("ECMAScript")]),t._v(" "),s("code",[t._v("DOM")]),t._v(" "),s("code",[t._v("BOM")]),t._v("     三大部分组成.")])]),t._v(" "),s("h3",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("ul",[s("li",[t._v("严格区分大小写, 开头必须是字母和下划线 和$")]),t._v(" "),s("li",[t._v("JavaScript 忽略空白符和换行符")]),t._v(" "),s("li",[t._v("在语句结束的时候尽量不要省略 "),s("code",[t._v(";")])]),t._v(" "),s("li",[t._v("驼峰命名法")]),t._v(" "),s("li",[t._v("不能数字开头")])]),t._v(" "),s("h3",{attrs:{id:"常用的api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用的api","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用的API")]),t._v(" "),s("ol",[s("li",[t._v("警告框: "),s("code",[t._v("alert()")]),t._v(" --用户需要点击按钮才可以继续操作.")]),t._v(" "),s("li",[t._v("确认框: "),s("code",[t._v("confirm()")]),t._v(" --用户点击确认或者取消才可以继续")]),t._v(" "),s("li",[t._v("输入框: "),s("code",[t._v("prompt()")]),t._v(" --用户需要输入某个值,然后点击确认或者取消才可以继续.")]),t._v(" "),s("li",[t._v("在控制台输出: "),s("code",[t._v("console")]),t._v(" --将结果打印到控制台")])]),t._v(" "),s("h3",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("   :  用来储存值或表达式.")]),t._v(" "),s("p",[s("strong",[t._v("声明变量及赋值")]),t._v(" :    "),s("code",[t._v("var num = 5;")]),t._v(" --声明一个名为"),s("code",[t._v("num")]),t._v(" 的变量并把"),s("code",[t._v("5")]),t._v(" 赋值给他.")]),t._v(" "),s("p",[s("strong",[t._v("声明提前")]),t._v(" :  如果声明在后,则它会自动提前,而只把值留下来.")]),t._v(" "),s("p",[s("strong",[t._v("数据类型")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"简单数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单数据类型")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("Number")]),t._v("-------任意的数字")]),t._v(" "),s("ul",[s("li",[t._v("整数:            二进制(0-1)         八进制(0 - 7)     十六进制 ( 0   -   F)")]),t._v(" "),s("li",[t._v("浮点数:")]),t._v(" "),s("li",[t._v("无穷大 :      "),s("code",[t._v("Infinity")]),t._v("-正无穷大            "),s("code",[t._v("- Infinity")]),t._v("  负无穷大\n"),s("code",[t._v("NaN")]),t._v(" :          0 / 0 的时候    或者是一个非数字字符串的时候都会是NaN.")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("String")]),t._v("---------任意字符串")]),t._v(" "),s("ul",[s("li",[t._v("字符串类型,指的是用"),s("strong",[t._v("双引号")]),t._v("或者"),s("strong",[t._v("单引号")]),t._v("括起来的字符."),s("strong",[t._v("注意")]),t._v("是英文下的半角符号.")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Boolean")]),t._v("-------true /  false")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("true")]),t._v(" :   表示逻辑上的  "),s("strong",[t._v("对")]),t._v(";")]),t._v(" "),s("li",[s("code",[t._v("false")]),t._v(" : 表示逻辑上的 "),s("strong",[t._v("错;")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Undefined")]),t._v(" --------undefined")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("只有一个值, 即"),s("code",[t._v("undefined")])])]),t._v(" "),s("li",[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//弹出：undefined。 变量v声明但是没有赋值初始化，则为undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//m没有定义，直接使⽤会发⽣错误。")]),t._v("\n")])])]),s("p",[t._v("​")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Null")]),t._v("---------null")]),t._v(" "),s("ul",[s("li",[t._v("第二个只有一个值得数据类型,即"),s("code",[t._v("null")]),t._v("      表示一个空指针对象.")])])])]),t._v(" "),s("h3",{attrs:{id:"数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),s("h4",{attrs:{id:"显示转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 显示转换")]),t._v(" "),s("ol",[s("li",[s("h5",{attrs:{id:"其他类型转number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他类型转number","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他类型转"),s("code",[t._v("Number")])])])]),t._v(" "),s("ul",[s("li",[t._v("字符串转"),s("code",[t._v("Number")]),t._v("     ===>     如果字符串里面都是数字则会转成对应得数字,否则"),s("code",[t._v("NaN")])]),t._v(" "),s("li",[s("code",[t._v("boolean")]),t._v("转"),s("code",[t._v("Number")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("true")]),t._v(" ==> "),s("code",[t._v("1")])]),t._v(" "),s("li",[s("code",[t._v("false")]),t._v("==> "),s("code",[t._v("0")])])])]),t._v(" "),s("li",[s("code",[t._v("Undefinded")]),t._v("  ==>   "),s("code",[t._v("NaN")])]),t._v(" "),s("li",[s("code",[t._v("Null")]),t._v("    ===>  "),s("code",[t._v("0")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("小技巧")]),t._v(" :如果在一个数据前面加"),s("code",[t._v("+")]),t._v(" 号  则会自动转为 数字类型.")])])])]),t._v(" "),s("h5",{attrs:{id:"_2-其他类型转boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他类型转boolean","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.其他类型转"),s("code",[t._v("Boolean")])]),t._v(" "),s("ul",[s("li",[t._v("只有一下五个值会转成"),s("code",[t._v("false")]),t._v(",其余的都会转为"),s("code",[t._v("true")]),t._v(".\n"),s("ul",[s("li",[s("code",[t._v("0")]),t._v(" "),s("code",[t._v('""')]),t._v(" "),s("code",[t._v("NaN")]),t._v(" "),s("code",[t._v("Undefined")]),t._v(" "),s("code",[t._v("Null")])])])])]),t._v(" "),s("h5",{attrs:{id:"_3-其他类型转string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他类型转string","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.其他类型转"),s("code",[t._v("String")])]),t._v(" "),s("ul",[s("li",[t._v("本身长什么样子转成字符串之后就会是什么样子.")])]),t._v(" "),s("h5",{attrs:{id:"_4-其他类型转undefinded和null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-其他类型转undefinded和null","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.其他类型转"),s("code",[t._v("Undefinded")]),t._v("和"),s("code",[t._v("Null")])]),t._v(" "),s("ul",[s("li",[t._v("无法转换")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h3",{attrs:{id:"一-算数运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-算数运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 一.算数运算符")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("+")]),t._v(" "),s("code",[t._v("-")]),t._v(" "),s("code",[t._v("*")]),t._v(" "),s("code",[t._v("/")]),t._v(" "),s("code",[t._v("%")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("+")]),t._v(" 当两边都不是字符串得时候进行数学计算.    如果有"),s("code",[t._v("NaN")]),t._v("则结果也是"),s("code",[t._v("NaN")])]),t._v(" "),s("li",[t._v("字符串连接:    当一边为字符串得时候就会当作连接来使用")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"二-比较运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 二. 比较运算符")]),t._v(" "),s("ol",[s("li",[t._v("数字之间得比较就是    数学中得比较")]),t._v(" "),s("li",[t._v("字符串得比较    :       就是字母表中得计算      前面得字母小于后面得字母.")]),t._v(" "),s("li",[t._v("true  >    false")]),t._v(" "),s("li",[t._v("如果两边不同   则转换为数字后比较")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("特殊情况")]),t._v(" "),s("ul",[s("li",[t._v("NaN  和任何数都不想等,尽管是他自己本身.")]),t._v(" "),s("li",[t._v("undefi       和      null是相等得,")]),t._v(" "),s("li",[t._v("null      不等于       0")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"三-三元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-三元运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 三. 三元运算符")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("语法  :      表达式1     ? 表达式2     : 表达式3")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果表达是得逻辑值是"),s("code",[t._v("true")]),t._v(",则最终返回得是表达式1的值,     如果是"),s("code",[t._v("false")]),t._v("则最终返回的是表达式2的值.")])]),t._v(" "),s("li",[s("p",[t._v("用法:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" msg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"优秀"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"良好"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"一般"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"其他情况"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"四-逻辑运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-逻辑运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 四. 逻辑运算符")]),t._v(" "),s("ol",[s("li",[t._v("&&   与     只要有一个是false,那么结果就是  false.")]),t._v(" "),s("li",[t._v("||     或      只要有一个true  ,  那么结果就是  true.")])]),t._v(" "),s("ul",[s("li",[t._v("如果第一个能决定最后的结果,那值就是第一个.")]),t._v(" "),s("li",[t._v("如果第一个不能决定最后的结果,那值就是第二个.")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"条件循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件循环语句","aria-hidden":"true"}},[t._v("#")]),t._v(" 条件循环语句")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("if语句")]),t._v(" "),s("strong",[t._v("用法")]),t._v(":"),s("code",[t._v("if(condition){}")]),t._v(" "),s("code",[t._v("if(){}else{]")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("switch语句")])]),t._v(" "),s("p",[s("strong",[t._v("用法")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expressions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\t\t只有"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v("语句中的expressions和"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v("中的value\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value1\t\t\t\t\t对应"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("才会执行语句"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("碰到 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" 之后会结束语句"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//语句1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" value2\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//语句2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    defult\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//defalue语句")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("3."),s("code",[t._v("for循环")])]),t._v(" "),s("p",[s("strong",[t._v("语法")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 控制循环的初始变量\n表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 如果结果式 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" 则执行循环"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如果式 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("  则结束循环"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n表达式"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 一般都是进行自增或者式自减的操作\n注意 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 三个表达式都可以省略"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("第二个表达式省略之后默认值为    "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 中间的分号不能省\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("code",[t._v("while循环")])])]),t._v(" "),s("p",[s("strong",[t._v("语法")]),t._v(" :")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("code",[t._v("dou... while")]),t._v(" 循环")])]),t._v(" "),s("p",[s("strong",[t._v("语法")]),t._v(" :")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("dou"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            先执行循环"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("然后判断条件\n")])])]),s("p",[t._v("​")])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h3",{attrs:{id:"一-函数概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-函数概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 一.函数概述")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("简介")]),t._v(" :")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("函数就是封装一段代码,然后完成某种功能.")])])]),t._v(" "),s("li",[s("p",[t._v("​\t"),s("strong",[t._v("一种特别的对象(可以执行)")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("为什么要使用函数 ?")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("提高代码的复用.")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("便于阅读")])])])]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("语法")]),t._v(";")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("函数名")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("形参"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 形参 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    函数体\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("说明")]),t._v(" : 定义形参的时候只需要函数名不需要 var 声明.")]),t._v(" "),s("p",[s("strong",[t._v("return的作用")]),t._v(": 1.给调用者返回值.  2. 结束当前语句,(如果省略了return 或者有return没有返回值则最后返回的值   是   undefined)")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("重点")]),t._v(" "),s("p",[t._v("函数只有被调用,才会被执行.")]),t._v(" "),s("p",[t._v("​如果后面的函数名和前面的函数名重叠,则后定义的会覆盖前面定义的.")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"二-全局变量和局部变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-全局变量和局部变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 二. 全局变量和局部变量")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("全局变量: 在函数外声明.  作用于整个页面文档.")])]),t._v(" "),s("li",[s("p",[t._v("局部变量:在函数内声明 . 只在局部的区域起作用,")]),t._v(" "),s("p",[t._v("​\t\t表示形参的变量也是局部变量.")]),t._v(" "),s("p",[t._v("​\t\t在函数的外部不能访问到局部变量.")])])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("函数只有被调用,才会被执行.")]),t._v(" "),s("p",[t._v("​如果后面的函数名和前面的函数名重叠,则后定义的会覆盖前面定义的.")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"三-匿名函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-匿名函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 三.匿名函数")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("作用")]),t._v(" :封装一段代码,把本来得全局变量封装为局部变量,避免命名冲突.")])]),t._v(" "),s("h3",{attrs:{id:"四-函数的递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-函数的递归","aria-hidden":"true"}},[t._v("#")]),t._v(" 四.函数的递归")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("定义")]),t._v(" ：函数自己调用自己.")]),t._v(" "),s("li",[t._v("一定要有结束语句,否则会陷入死循环.")])]),t._v(" "),s("h3",{attrs:{id:"五-三个高阶的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五-三个高阶的函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 五.三个高阶的函数")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("map:映射")])]),t._v(" "),s("li",[s("code",[t._v("filter:过滤")])]),t._v(" "),s("li",[s("code",[t._v("reduce:归纳")])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("h3",{attrs:{id:"一-对象的简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-对象的简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 一. 对象的简介")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("概念:")]),t._v(" "),s("ul",[s("li",[t._v("多个数据的封装体.(或者是一个保存数据的容器)")]),t._v(" "),s("li",[t._v("一个对象代表现实中的一个食物,(比如一个人,有很多属性组成)")])])]),t._v(" "),s("li",[s("strong",[t._v("为什么要使用对象 ?")]),t._v("    便于对多个数据进行同一个管理.")]),t._v(" "),s("li",[s("strong",[t._v("对象的组成")]),t._v(" "),s("ul",[s("li",[t._v("属性 :  属性名(字符串)和属性值组成.")]),t._v(" "),s("li",[t._v("方法: 一种特别的属性,属性值是函数.")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-面向对象得三大特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向对象得三大特征","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 面向对象得三大特征")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("封装")]),t._v(" "),s("p",[t._v("把客观事物封装成抽象得类或者具体得象,并且类或者对象可以把自己的数据和方法只让可信的类或者对象操作,对不可信的进行信息隐藏.")])]),t._v(" "),s("li",[s("p",[t._v("继承")]),t._v(" "),s("p",[t._v("可以让某个类型的对象获得另一个类型的对象的属性的方法.")])]),t._v(" "),s("li",[s("p",[t._v("多态")]),t._v(" "),s("p",[t._v("不同实例的相同方法在不同情形下有不同表现形式.多态机制使具有不同内部结构的对象可以共享相同的外部接口.")])])]),t._v(" "),s("h3",{attrs:{id:"二-对象的属性相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-对象的属性相关","aria-hidden":"true"}},[t._v("#")]),t._v(" 二. 对象的属性相关")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("对象的字面量")])]),t._v(" "),s("p",[t._v("{")]),t._v(" "),s("p",[t._v("属性名 : 属性值,")]),t._v(" "),s("p",[t._v("属性名 : 匿名函数,")]),t._v(" "),s("p",[t._v("}")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("访问对象的属性")])]),t._v(" "),s("p",[t._v("对象 "),s("code",[t._v(".")]),t._v(" 属性名")]),t._v(" "),s("p",[t._v("对象"),s("code",[t._v("[ 属性名]")]),t._v(" 如果使字符串则用双引号和单引号括起来.")]),t._v(" "),s("ul",[s("li",[s("ol",[s("li",[t._v("==属性名包含特殊字符 :  -     空格.==")]),t._v(" "),s("li",[t._v("==属性名不确定.==")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("增加或者修改对象")])]),t._v(" "),s("p",[t._v("对象.属性名 = 值.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("删除对象的属性")])]),t._v(" "),s("p",[t._v("delete  对象.属性")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("this的两种使用方法.")])]),t._v(" "),s("ul",[s("li",[t._v("对象.方法()\n"),s("ul",[s("li",[t._v("方法中的this指的就是当前的对象")])])]),t._v(" "),s("li",[t._v("构造函数()\n"),s("ul",[s("li",[t._v("括号中的this指的是new出来的对象.")])])]),t._v(" "),s("li",[t._v("函数()\n"),s("ul",[s("li",[t._v("函数内的this指的是window.")])])]),t._v(" "),s("li",[t._v("函数的借调\n"),s("ul",[s("li",[t._v("A()      A.call()")]),t._v(" "),s("li",[t._v("每个函数A都有一个方法call,使用这个这个方法,也可以调用函数A,可以指")])])])])])]),t._v(" "),s("h2",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("h3",{attrs:{id:"一-原型的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-原型的概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 一.原型的概念")]),t._v(" "),s("p",[t._v("每一个函数或者是对象都有一个默认的属性 "),s("code",[t._v("prototype")]),t._v(" 然后这个原型指向一个对象,称为原型对象.原型对象里面也有一个属性"),s("code",[t._v("constructor")]),t._v("   表示构造器,他会指向函数对象")]),t._v(" "),s("p",[s("strong",[t._v("原型的作用?")]),t._v("  :   可以在原型中添加属性和方法被构造出来的函数共用.")]),t._v(" "),s("p",[s("strong",[t._v("原型的使用")]),t._v(" :  一般原型里面添加方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("_init")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("opt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    constructor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("speak")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nage "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sex "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"男"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"显示原型和隐式原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#显示原型和隐式原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 显示原型和隐式原型")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每个函数function都有一个prototype,即显示原型属性,默认指向一个空的object对象;  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//每个实例对象都有一个一个__proto__,即隐式对象.")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n\tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protptype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对象的隐式原型的值与其对应的构造函数的显示原型的值相等.")]),t._v("\n")])])]),s("h3",{attrs:{id:"原型链的一些相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链的一些相关","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链的一些相关")]),t._v(" "),s("ol",[s("li",[t._v("如过读取对象的属性值,就会查找原型链")]),t._v(" "),s("li",[t._v("设置对象的属相值的时候,则不会去查找原型链,如果自身没有此属性则会直接在添加.")])]),t._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("h3",{attrs:{id:"一-数组的简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-数组的简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 一. 数组的简介")]),t._v(" "),s("p",[s("strong",[t._v("1. 什么是数组")]),t._v(" ?")]),t._v(" "),s("ul",[s("li",[t._v("数组就是一些简单数据的有序结合,   里面可以包含任意数据.")])]),t._v(" "),s("p",[s("strong",[t._v("2.为什么要用数据组")]),t._v("  ?")]),t._v(" "),s("ul",[s("li",[t._v("储存相同类型的数据时用变量或者是对象十分的不方便,所以用数组来表示")])]),t._v(" "),s("h3",{attrs:{id:"_3-数组的用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组的用法","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("strong",[t._v("3.数组的用法?")])]),t._v(" "),s("ul",[s("li",[t._v("数组的创建\n"),s("ul",[s("li",[t._v("字面量:"),s("code",[t._v("var arr = [element,index,self]")])]),t._v(" "),s("li",[t._v("构造函数:"),s("code",[t._v("var arr = new Array()")])])])])]),t._v(" "),s("h3",{attrs:{id:"_4-数组的遍历-var-arr-112-4-325-5-344-534-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组的遍历-var-arr-112-4-325-5-344-534-3","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("strong",[t._v("4.数组的遍历")]),t._v(" "),s("code",[t._v("var arr = [112,4,325,5,344,534,3]")])]),t._v(" "),s("ul",[s("li",[t._v("for循环\n"),s("ul",[s("li",[s("code",[t._v("for(i = 0 ; i < arr.length ; i++)")])])])]),t._v(" "),s("li",[t._v("for in (for in 遍历出来的是数组的下标)")]),t._v(" "),s("li",[t._v("for of")]),t._v(" "),s("li",[t._v("forEach\n"),s("ul",[s("li",[s("code",[t._v("arr.forEach(function(e,i){``})")])])])])]),t._v(" "),s("h3",{attrs:{id:"_5-数组的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-数组的转换","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("strong",[t._v("5.数组的转换")])]),t._v(" "),s("ul",[s("li",[t._v("toString()       "),s("code",[t._v("arr.toString")]),t._v("   把数组转换为字符串之后,每个元素再用逗号连接.")]),t._v(" "),s("li",[t._v("join()        "),s("code",[t._v("arr.join()")]),t._v('  把数组转换为字符串但是""中的符号可以自定义.')])]),t._v(" "),s("h3",{attrs:{id:"_6-数组的一些常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-数组的一些常用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.数组的一些常用方法")]),t._v(" "),s("ul",[s("li",[t._v("添加元素\n"),s("ul",[s("li",[t._v("首位添加 : unshift           末尾添加: push")]),t._v(" "),s("li",[t._v("首位删除: shift                  末尾删除: pop")])])]),t._v(" "),s("li",[t._v("倒置数组  :    "),s("code",[t._v("reverce")])]),t._v(" "),s("li",[t._v("连接数组  : "),s("code",[t._v("concat")])]),t._v(" "),s("li",[t._v("切割元素  "),s("code",[t._v("slice(from,to)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("from")]),t._v("包括   "),s("code",[t._v("to")]),t._v("不包括 "),s("code",[t._v("to")]),t._v("可以省略   如果都省略则整个都会切下来")]),t._v(" "),s("li",[t._v("返回的是一个新数组.")])])]),t._v(" "),s("li",[t._v("替换元素 : "),s("code",[t._v("splice(参数1,参数2,参数3)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("参数1")]),t._v(" 表示从那个下标开始  "),s("code",[t._v("参数2")]),t._v(" 表示删除几个元素, "),s("code",[t._v("参数3")]),t._v("表示要增加的元素")])])])]),t._v(" "),s("h3",{attrs:{id:"_7-数组的排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-数组的排序","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("strong",[t._v("7.数组的排序")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    retrun a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b     升序\n    retrun b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a     降序\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_8-数组的去重"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-数组的去重","aria-hidden":"true"}},[t._v("#")]),t._v(" "),s("strong",[t._v("8.数组的去重")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toHeavy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toHeavy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("h3",{attrs:{id:"一-字符串的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-字符串的创建","aria-hidden":"true"}},[t._v("#")]),t._v(" 一. 字符串的创建")]),t._v(" "),s("ul",[s("li",[t._v("字面量 "),s("code",[t._v('var s = ""')])]),t._v(" "),s("li",[t._v("toString 转换函数   "),s("code",[t._v("var s = String(可以是任何参数)")])])]),t._v(" "),s("h3",{attrs:{id:"二-字符串的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-字符串的常用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 二.字符串的常用方法")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("s.charAt(index)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("返回的是下标中的字符")])]),t._v(" "),s("tr",[s("td",[t._v("s[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("也可以访问")])]),t._v(" "),s("tr",[s("td",[t._v("charcodeAt")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("返回的Unicode 码")])]),t._v(" "),s("tr",[s("td",[t._v("substring(start , stop)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("返回的是区间下标内的字符,下标为负值会替换成0")])]),t._v(" "),s("tr",[s("td",[t._v("slice(start,stop)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("和substring的唯一区别就是把负值下标加上字符串长度")])]),t._v(" "),s("tr",[s("td",[t._v("substr(start , length)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标开始,定义长度的的字符")])]),t._v(" "),s("tr",[s("td",[t._v("toUpperCase"),s("code",[t._v("------")]),t._v("toLowerCase()")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("转换大小写")])]),t._v(" "),s("tr",[s("td",[t._v("trim")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("去除字符串首尾的空白字符")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h3",{attrs:{id:"一-正则表达式的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-正则表达式的创建","aria-hidden":"true"}},[t._v("#")]),t._v(" 一.正则表达式的创建")]),t._v(" "),s("ol",[s("li",[s("code",[t._v('var re = new RegExp(s,"gi")')])]),t._v(" "),s("li",[t._v("字面量 : "),s("code",[t._v("var re = /a/gi;")])])]),t._v(" "),s("h3",{attrs:{id:"二-常用的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-常用的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 二. 常用的方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("text()")]),t._v(" :  匹配修饰符,如果有"),s("code",[t._v("g")]),t._v(" 的话会从上次匹配到的位置开始继续匹配,如果没"),s("code",[t._v("g")]),t._v(" 的话会从头开始匹配.\n"),s("ul",[s("li",[t._v("如果匹配不 了,下次还是会从头开始,")]),t._v(" "),s("li",[s("code",[t._v("lastIndex")]),t._v(" 这个属性记录上次匹配的位置")])])]),t._v(" "),s("li",[s("code",[t._v("exec()")]),t._v(" :会把匹配到的元素返回到数组,并包括"),s("code",[t._v("index")]),t._v(" 和源码两个数型")])]),t._v(" "),s("h3",{attrs:{id:"三-规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 三. 规则")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意的字符")])]),t._v(" "),s("tr",[s("td",[t._v("[123]")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("要么1要么2要么3")])]),t._v(" "),s("tr",[s("td",[t._v("[a-z]")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("所有的小写字母")])]),t._v(" "),s("tr",[s("td",[t._v("[^a]")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("不是字母a  当把 ^放在[]中的时候表示非")])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配的所有的数字  ===[0-9]    d:digital")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配所有的非数字 === [^0-9]")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配所有的单词字符  数字字母和下划线  ===[0-9a-zA-Z_]  w:word")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配所有的非单词字符  非数字字母和下划线  ===[^0-9a-zA-Z_]")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个空白字符，包括空格、制表符、换页符和换行符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个非空白字符")])]),t._v(" "),s("tr",[s("td",[t._v("^a")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以a开头")])]),t._v(" "),s("tr",[s("td",[t._v("a$")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("以a结尾.")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("表示 0 个或 1个")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("表示 0 个或多个 >=0")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("表示 1个或多个  >=1")])]),t._v(" "),s("tr",[s("td",[t._v("{m}")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("正好m个")])]),t._v(" "),s("tr",[s("td",[t._v("{m,}")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("m个或多个  >=m")])]),t._v(" "),s("tr",[s("td",[t._v("{m,n}")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("至少m个, 最多n个")])]),t._v(" "),s("tr",[s("td",[t._v("()")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("进行分组")])]),t._v(" "),s("tr",[s("td",[t._v("丨")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("或")])])])]),t._v(" "),s("h3",{attrs:{id:"四-支持正则表达是的四种字符串用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-支持正则表达是的四种字符串用法","aria-hidden":"true"}},[t._v("#")]),t._v(" 四.支持正则表达是的四种字符串用法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Abc123aBc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/abc/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/abc/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使设置的全局模式，每次search也是从开始向后查找")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//match⽅法和正则表达式的exec()⽅法的作⽤是⼀样的，但是match会⼀次性把所有的匹配放在⼀个数组")]),t._v("\n中，全部返回\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/abc/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Abc,aBc")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[ab]/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把a或b替换成x")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ss "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[0-9]+/gi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//⽤1个或多个数字切割。 Abc,aBc")]),t._v("\n")])])]),s("p",[s("code",[t._v("s.search")]),t._v(":   返回值是匹配到元素的下标,不管加不加"),s("code",[t._v("g")]),t._v(" 都是从头开始找")]),t._v(" "),s("p",[s("code",[t._v("s.match")]),t._v(" :  和"),s("code",[t._v("exce()")]),t._v(" 的方法一样但是"),s("code",[t._v("match")]),t._v(" 会吧匹配到的都放在一个数组中,全部返回.")]),t._v(" "),s("p",[s("code",[t._v("s.replace")]),t._v("(用\\1来捕获组,  用$1来替换:替换满足正则表达式返回")]),t._v(" "),s("p",[s("code",[t._v("S.split:")]),t._v("   把满足的正则表达是切割出去,,,并返回一个字符串数组.")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"bom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bom","aria-hidden":"true"}},[t._v("#")]),t._v(" BOM")]),t._v(" "),s("h3",{attrs:{id:"定时器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时器","aria-hidden":"true"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("setTimeout")]),t._v(" : 在指点时间后执行函数里面的代码")]),t._v(" "),s("li",[s("code",[t._v("setInterval")]),t._v(": 每隔一段时间后自动执行代码.")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),s("h3",{attrs:{id:"节点-每个节点都是一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点-每个节点都是一个对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点(每个节点都是一个对象)")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("所有的节点都有三个共同的属性")]),t._v(" "),s("ul",[s("li",[t._v("nodeName : 节点名")]),t._v(" "),s("li",[t._v("nodeType :节点类型")]),t._v(" "),s("li",[t._v("nodeValue :  节点值")])]),t._v(" "),s("p",[s("strong",[t._v("获取元素节点的多种方式")])]),t._v(" "),s("ol",[s("li",[t._v("根据id来获取"),s("code",[t._v("getElementById")]),t._v(" "),s("ul",[s("li",[t._v("给元素命名ID的时候,理论不重复,如果重复,找到的是第一个")])])]),t._v(" "),s("li",[t._v("根据className来查找元素"),s("code",[t._v("getElementsByClass")]),t._v(" "),s("ul",[s("li",[t._v("得到的是多个元素组成的类数组")])])]),t._v(" "),s("li",[t._v("根据标签名来获取  "),s("code",[t._v("getElementsByTagName")]),t._v(" "),s("ul",[s("li",[t._v("得到的也是多个元素组成的类数组("),s("code",[t._v("array-like")]),t._v(")")])])]),t._v(" "),s("li",[t._v("通过name属性的值来获取  "),s("code",[t._v("getElementsByName")]),t._v(" "),s("ul",[s("li",[t._v("不常用,一般用来查找表单元素")])])])]),t._v(" "),s("p",[s("strong",[t._v("html5新增两种强大查找元素的方法:")])]),t._v(" "),s("ol",[s("li",[s("code",[t._v('document.querySelector("")')]),t._v(" "),s("ul",[s("li",[t._v("只能找到满足选择器的第一个元")])])]),t._v(" "),s("li",[s("code",[t._v("document.querySelectorAll")]),t._v(" "),s("ul",[s("li",[t._v("能找到满足的选择器的所有元素")]),t._v(" "),s("li",[t._v("返回的是一个类数组(Nodelist   节点列表)")])])])]),t._v(" "),s("h3",{attrs:{id:"节点之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点之间的关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点之间的关系")]),t._v(" "),s("ul",[s("li",[t._v("父子节点\n"),s("ul",[s("li",[s("code",[t._v("childN0odes")]),t._v(" 获取所以子节点")]),t._v(" "),s("li",[s("code",[t._v("firstChild")]),t._v(" : 获取元素的第一个子节点")]),t._v(" "),s("li",[s("code",[t._v("lastChild")]),t._v(" : 获取元素的最后一个子节点")]),t._v(" "),s("li",[s("code",[t._v("parentNode")]),t._v(" : 获取元素的第一个父节点")])])]),t._v(" "),s("li",[t._v("兄弟节点\n"),s("ul",[s("li",[s("code",[t._v("nextSbling")]),t._v(" :获取元素的下一个兄弟节点")]),t._v(" "),s("li",[s("code",[t._v("previousSbling")]),t._v(": 获取元素的上个兄弟节点.")])])])]),t._v(" "),s("h3",{attrs:{id:"创建节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建节点","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建节点")]),t._v(" "),s("ul",[s("li",[t._v("创建元素节点 :"),s("code",[t._v('createElement("元素名")')]),t._v(" .")]),t._v(" "),s("li",[t._v("创建文本节点:"),s("code",[t._v('createText("文本内容")')])]),t._v(" "),s("li",[t._v("给一个元素追加"),s("code",[t._v("child")]),t._v(" 节点."),s("code",[t._v("appendChild")]),t._v(" (new,old)")]),t._v(" "),s("li",[t._v("在一个节点前增加一个节点."),s("code",[t._v("insertBefore()")])]),t._v(" "),s("li",[t._v("移除子节点 : "),s("code",[t._v("removeChild")])]),t._v(" "),s("li",[t._v("替换子节点:"),s("code",[t._v("replaceChild")]),t._v(".")]),t._v(" "),s("li",[t._v("克隆节点"),s("code",[t._v("node.cloneNode(true/false)")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("getAttriblute")]),t._v("   获取属性值")])]),t._v(" "),s("li",[s("p",[s("code",[t._v('setAttribute("属性名","属性值")')]),t._v("    设置属性值.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("removeAttribute")]),t._v("   移除属性")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("interHTML")]),t._v(" : 会返回所有的内容,如果有标签会把标签解析出来.")])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("事件流的三个阶段")])]),t._v(" "),s("ul",[s("li",[t._v("捕获阶段")]),t._v(" "),s("li",[t._v("处于目标阶段")]),t._v(" "),s("li",[t._v("冒泡阶段( 默认都在冒泡阶段,因为冒泡阶段的兼容性更好)")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("事件的三要素")])]),t._v(" "),s("ul",[s("li",[t._v("事件源(表示事件发生的那个元素的位置)")]),t._v(" "),s("li",[t._v("事件对象(会把事件发生的坐标,事件类型封装到一个对象中)")]),t._v(" "),s("li",[t._v("事件处理程序(监听器) - -执行的代码,都在函数内.")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("事件处理程序")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("HTML事件处理程序")])]),t._v(" "),s("li",[s("p",[t._v("DOM0事件处理程序")]),t._v(" "),s("ul",[s("li",[t._v("注册事件的时候总是以on开头---"),s("code",[t._v("btn.onclick")]),t._v("---"),s("code",[t._v("btn.onmouseover")])]),t._v(" "),s("li",[t._v("去掉dom0事件 ------"),s("code",[t._v("btn.onclick = null")])]),t._v(" "),s("li",[t._v("缺点:同一个类型的事件,只能有一个事件处理程序.")])])]),t._v(" "),s("li",[s("p",[t._v("DOM事件处理程序")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("给元素追加监听器")])]),t._v(" "),s("li",[s("p",[t._v("参数1:事件的类型     参数2:事件处理程序     参数3:事件是否在捕获阶段触发事件")])]),t._v(" "),s("li",[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("btn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventlistener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"click"')]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("常用的一些时间")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("onresize")]),t._v(" : 改变窗口大小时执行事件")]),t._v(" "),s("li",[s("code",[t._v("onscroll")]),t._v(" :滚动滚动条时.")]),t._v(" "),s("li",[s("code",[t._v("onfocus")]),t._v(" :获取焦点")]),t._v(" "),s("li",[s("code",[t._v("onblur")]),t._v(" :失去焦点.(不冒泡)")])]),t._v(" "),s("p",[s("strong",[t._v("鼠标事件")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("mouseover")]),t._v(": 鼠标进入某个区域")]),t._v(" "),s("li",[s("code",[t._v("mouseout")]),t._v(" :鼠标从某个区域出来(这两个是冒泡的)")]),t._v(" "),s("li",[s("code",[t._v("mouseenter")])]),t._v(" "),s("li",[s("code",[t._v("mouseleave")]),t._v(" (这两个是不冒泡的版本)")]),t._v(" "),s("li",[s("code",[t._v("mousemove")]),t._v(" :鼠标移动")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("事件对象")]),t._v("(触发事件的时候都会有一个默认的"),s("code",[t._v("event")]),t._v(" 参数)")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("type : click")])]),t._v(" "),s("li",[s("code",[t._v("target")]),t._v(" : 事件发生区域最内层的那个元素(处于目标阶段的那个元素)")]),t._v(" "),s("li",[s("code",[t._v("currentTarget")]),t._v(" : 事件注册在谁身上就表示那个元素.")]),t._v(" "),s("li",[s("code",[t._v("stopPropagation()")]),t._v(" :停止事件的进一步传播")]),t._v(" "),s("li",[s("code",[t._v("preventDefault")]),t._v(" () :阻止事件的默认行为.")])])])])])},[],!1,null,null,null);a.default=n.exports}}]);